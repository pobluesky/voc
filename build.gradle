plugins {
    id 'java'
    id 'org.springframework.boot' version '3.2.8'
    id 'io.spring.dependency-management' version '1.1.6'
}

group = 'com.pobluesky'
version = '0.0.1-SNAPSHOT'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

ext {
    set('springCloudVersion', "2023.0.3")
}

dependencyManagement {
    imports {
        mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
    }
}

dependencies {

    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-web-services'

    implementation 'org.springframework.cloud:spring-cloud-starter-netflix-eureka-client'
    compileOnly 'org.projectlombok:lombok'
    developmentOnly 'org.springframework.boot:spring-boot-devtools'
    annotationProcessor 'org.projectlombok:lombok'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
    implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.2.0'

    implementation 'org.springframework.boot:spring-boot-starter-data-jdbc'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'

    //Querydsl 추가
    implementation 'com.querydsl:querydsl-jpa:5.0.0:jakarta'
    annotationProcessor "com.querydsl:querydsl-apt:${dependencyManagement.importedProperties['querydsl.version']}:jakarta"
    annotationProcessor "jakarta.annotation:jakarta.annotation-api"
    annotationProcessor "jakarta.persistence:jakarta.persistence-api"

    //Query Log
    implementation 'com.github.gavlyukovskiy:p6spy-spring-boot-starter:1.9.0'

    implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.2.0'

    implementation 'org.springframework.cloud:spring-cloud-starter-openfeign:4.0.3'

    implementation 'io.github.openfeign.form:parent:3.8.0'
    implementation 'io.github.openfeign.form:feign-form-spring:3.8.0'

    //Jwt
    implementation 'io.jsonwebtoken:jjwt-api:0.11.5'
    implementation 'io.jsonwebtoken:jjwt-impl:0.11.5'
    implementation 'io.jsonwebtoken:jjwt-jackson:0.11.5'

    //postgres
    implementation 'org.postgresql:postgresql:42.7.4'

//    //kafka
//    implementation 'org.springframework.kafka:spring-kafka:3.2.3'
//
//    implementation 'net.logstash.logback:logstash-logback-encoder:6.6'

    // google cloud vision
    implementation group: 'com.google.code.gson', name: 'gson', version: '2.8.5'
    implementation platform('com.google.cloud:libraries-bom:26.1.4')
    implementation 'com.google.cloud:google-cloud-bigquery'
    implementation 'com.google.cloud:google-cloud-vision:3.3.0'

    // gcp storage
    implementation 'org.springframework.cloud:spring-cloud-gcp-starter:1.2.8.RELEASE'
    implementation 'org.springframework.cloud:spring-cloud-gcp-storage:1.2.8.RELEASE'

    //PDF
    implementation 'org.apache.pdfbox:pdfbox:2.0.27'
    implementation 'org.apache.pdfbox:pdfbox-tools:2.0.27'

    // FCM
    implementation("com.google.firebase:firebase-admin:6.8.1")
    implementation("com.squareup.okhttp3:okhttp:4.2.2")

}

tasks.named('test') {
    useJUnitPlatform()
}

// QClass path
def generated = 'src/main/generated'

tasks.withType(JavaCompile) {
    options.getGeneratedSourceOutputDirectory().set(file(generated))
}

sourceSets {
    main.java.srcDirs += [ generated ]
}

clean {
    delete file('src/main/generated')
}